const posi=math.complex(0,1),negi=math.complex("-i"),zero=[1,0],one=[0,1];Array.prototype.equals&&console.warn("Overriding existing Array.prototype.equals"),Array.prototype.equals=function(t){if(!t)return!1;if(this.length!=t.length)return!1;for(var a=0,e=this.length;a<e;a++)if(this[a]instanceof Array&&t[a]instanceof Array){if(!this[a].equals(t[a]))return!1}else if(this[a]!=t[a])return!1;return!0},Object.defineProperty(Array.prototype,"equals",{enumerable:!1});class Helpers{constructor(){}static dictAppend(t,a){t["bit"+(Object.keys(t).length+1)]=a}static createProbs(t,a){var e=[];const r=Math.pow(2,a);for(let t=0;t<r;t++)e.push([parseInt(t.toString(2),10),1/r]);return e}static retZero(t){return 6.123233995736766e-17==t|1.2246467991473532e-16==t|-1.2246467991473532e-16==t?0:t}}class format{constructor(){}static measure(t){var a=t.amplitudes.length;if(a>0){var e=Math.floor(Math.random()*a);return"\nCollapsed State: "+t.amplitudes[e][0]+"\nProbability: "+t.amplitudes[e][1]+"\n"}return t.value}static displayValue(t){return t.value}static nKron(t){if(1==t.length)return t[0];var a=math.identity(2**t.length),e="";return t.forEach(function(t){!0===t.equals(zero)?e+="0":!0===t.equals(one)&&(e+="1")}),a._data[parseInt(e,2)]}static unKron(t){var a=t.indexOf(1),e="";if(a<Math.log2(t.length))for(var r=0;r<Math.log2(t.length)-a;r++)e+="0";return e+=a.toString(2),format.evalBraKet(e)}static evalBraKet(t){if("string"!=typeof t)throw new Error("Error: Expression must be of type String");var a=new Array;for(var e in t)"0"===t.charAt(e)?a.push(zero):"1"===t.charAt(e)&&a.push(one);return a}}class QC{constructor(){this.bits={}}qreg(t){return this.value=format.nKron(Array(t).fill(zero)),this.amplitudes=[],this}x(t){return this.paulix=[[0,1],[1,0]],t.value=math.multiply(t.value,this.paulix),t}y(t){return this.pauliy=[[0,negi],[posi,0]],t.value=math.multiply(t,value,this.pauliy),t}z(t){return this.pauliz=[[1,0],[0,-1]],t.value=math.multiply(t.value,this.pauliz),t}sqrtx(t){return this.sqrtx=math.multiply(.5,[[posi,negi],[negi,posi]]),t.value=math.multiply(t.value,this.sqrtx),t}phase(t,a){return this.phase=[[1,0],[0,Math.exp(math.multiply(posi,t))]],a.value=math.multiply(a.value,this.phase),a}t(t){return this.t=[[1,0],[0,math.e**(posi*(math.pi/4))]],t.value=math.multiply(t.value,this.t),t}rx(t,a){switch(this.rx=[[math.cos(t/2),math.multiply(negi,math.complex(math.sin(t/2)))],[math.multiply(negi,math.complex(math.sin(t/2))),math.cos(t/2)]],t){case math.pi:a.value=math.multiply(a.value,[[0,1],[1,0]]);break;case 2*math.pi:a.value=a.value;break;default:a.value=math.multiply(a.value,this.rx)}return a}ry(t,a){switch(this.rx=[[math.cos(t/2),math.multiply(-1,math.complex(math.sin(t/2)))],[math.complex(math.sin(t/2)),math.cos(t/2)]],t){case math.pi:a.value=math.multiply(a.value,[[0,1],[1,0]]);break;case 2*math.pi:a.value=a.value;break;default:a.value=math.multiply(a.value,this.ry)}return a}rz(t,a){return this.rx=[[Math.exp(math.multiply(math.complex("0-1i"),t/2)),0],[0,Math.exp(math.multiply(math.complex("0+1i"),t/2))]],a.value=math.multiply(a.value,this.rx),a}h(t){if(4==t.value.length)return this.h2=math.multiply(1/math.sqrt(2),[[1,0,1,0],[0,1,0,1],[1,0,-1,0],[0,1,0,-1]]),t.amplitudes=Helpers.createProbs(t,2),t.value=math.multiply(t.value,this.h2),t;if(2==t.value.length)return this.h=math.multiply(1/math.sqrt(2),[[1,1],[1,-1]]),t.amplitudes=Helpers.createProbs(t,1),t.value=math.multiply(t.value,this.h),t;throw new Error("Error: Maximum 2 qubits")}swap(t){return this.swap=[[1,0,0,0],[0,0,1,0],[0,1,0,0],[0,0,0,1]],t.value=math.multiply(t.value,this.swap),t}sqrtswap(t){return this.sqrtswap=[[1,0,0,0],[0,math.multiply(.5,math.complex(1,1)),math.multiply(.5,math.complex("1-1i")),0],[0,math.multiply(.5,math.complex("1-1i")),math.multiply(.5,math.complex(1,1)),0],[0,0,0,1]],t.value=math.multiply(t.value,this.sqrtswap),this}cx(t){return this.cnot=[[1,0,0,0],[0,1,0,0],[0,0,0,1],[0,0,1,0]],t.value=math.multiply(this.cnot,t.value),t}cy(t){return this.cy=[[1,0,0,0],[0,1,0,0],[0,0,0,negi],[0,0,posi,0]],t.value=math.multiply(t.value,this.cy),this}cz(t){return this.cz=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,-1]],t.value=math.multiply(t.value,this.cz),this}ccnot(t){return this.toffoli=[[1,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0],[0,0,1,0,0,0,0,0],[0,0,0,1,0,0,0,0],[0,0,0,0,1,0,0,0],[0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,1,0]],t.value=math.multiply(t.value,this.toffoli),this}cswap(t){return this.cswap=[[1,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0],[0,0,1,0,0,0,0,0],[0,0,0,1,0,0,0,0],[0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,0],[0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1]],t.value=math.multiply(t.value,this.cswap),this}}
